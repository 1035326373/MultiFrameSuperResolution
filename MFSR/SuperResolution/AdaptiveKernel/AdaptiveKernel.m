% This program implements the algorithm presented in the following paper% Mohammad Moinul Islam, , Vijayan K. Asari, Mohammed Nazrul Islam, and % Mohammad A. Karim, ?Video super-resolution by adaptive kernel regression,? % Lecture Notes in Computer Science, Published by Springer-Verlag Berlin/% Heidelberg ISSN: 0302-9743 (Print) 1611-3349 (Online), Advances in Visual% Computing, Edited by G. Bebis et al. Proceedings of the International % Symposium on Visual Computing -ISVC - 2009: ISBN: 978-3-642-10519-7, % vol. 5876/2009, pp. 799-806, November 2009%% Inputs:% LR - A sequence of low resolution images%% Outputs:% The estimated HR imagefunction [HR, maxIter] = AdaptiveKernel(LR)% set input bufferbuffer = LR;% get input dimensions[m,n,s] = size(LR);h= 0.5;hr= 255;iter= 1;maxIter= m*n;w=waitbar(0, 'Estimating high-resolution image');for i= 1:m-1    waitbar(iter/maxIter);    for j= 1:n-1        kr_11= 0;        krf_11= 0;        kr_12= 0;        krf_12= 0;        kr_21= 0;        krf_21= 0;        kr_22= 0;        krf_22= 0;        for k= 1:s            % Gaussian kernel            kr_bilat= (1/(2*pi*hr*hr))*exp(-(norm(buffer(i,j,k)-mean(buffer(i,j,:))).^2)/(2*hr*hr));                        kr_11= kr_11 + (1/(2*pi*h*h))*exp(-(norm((i-i)^2+(j-j)^2).^2)/(2*h*h))*kr_bilat;            krf_11= krf_11 + buffer(i,j,k)*(1/(2*pi*h*h))*exp(-(norm((i-i)^2+(j-j)^2).^2)/(2*h*h))*kr_bilat;            kr_12= kr_12 + (1/(2*pi*h*h))*exp(-(norm((i-i)^2+(j+1-j)^2).^2)/(2*h*h))*kr_bilat;            krf_12= krf_12 + buffer(i,j+1,k)*(1/(2*pi*h*h))*exp(-(norm((i-i)^2+(j+1-j)^2).^2)/(2*h*h))*kr_bilat;            kr_21= kr_21 + (1/(2*pi*h*h))*exp(-(norm((i+1-i)^2+(j-j)^2).^2)/(2*h*h))*kr_bilat;            krf_21= krf_21 + buffer(i+1,j,k)*(1/(2*pi*h*h))*exp(-(norm((i+1-i)^2+(j-j)^2).^2)/(2*h*h))*kr_bilat;            kr_22= kr_22 + (1/(2*pi*h*h))*exp(-(norm((i+1-i)^2+(j+1-j)^2).^2)/(2*h*h))*kr_bilat;            krf_22= krf_22 + buffer(i+1,j+1,k)*(1/(2*pi*h*h))*exp(-(norm((i+1-i)^2+(j+1-j)^2).^2)/(2*h*h))*kr_bilat;        end        tmp= [krf_11/kr_11 krf_12/kr_12;krf_21/kr_21 krf_22/kr_22];        ynew(2*i-1:2*i,2*j-1:2*j)= tmp;        iter=iter+1;    end    iter=iter+1;end% median filterHR= medfilt2(ynew,[2 2]);close(w);